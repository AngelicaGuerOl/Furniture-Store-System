/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Vista;

import java.awt.Component;
import javax.swing.JTable;
import javax.swing.JTextArea;
import java.sql.SQLException;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import Conexion.Conexion;
import java.awt.Component;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author Angelica Guerrero
 */
public class VHistorial extends javax.swing.JInternalFrame {
    DefaultTableModel modelo = new DefaultTableModel();
    DefaultTableModel modelo2 = new DefaultTableModel();
    DefaultTableModel modelo3 = new DefaultTableModel();
    private FMenu ventana;
    private FMenu menu;
    
    /**
     * Creates new form VHistorial
     */
    public VHistorial(FMenu ventana) {
        initComponents();
        this.ventana=ventana;
        this.ventana.mostrarImagenDeFondo();
        this.setSize(1366,660);
        this.menu=ventana;
        
        this.tablaTransaccion();
        this.tablaAbonos();
        this.tablaLiquidaciones();
        text_total.setEnabled(false);
        text_total.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jDateChooser_fecha = new com.toedter.calendar.JDateChooser();
        scp_transaccion = new javax.swing.JScrollPane();
        tb_transaccion = new javax.swing.JTable();
        btn_mostrar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        scp_abonos = new javax.swing.JScrollPane();
        tb_abonos = new javax.swing.JTable();
        scp_liquidacion = new javax.swing.JScrollPane();
        tb_liquidacion = new javax.swing.JTable();
        text_total = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);

        panel1.setBackground(new java.awt.Color(204, 204, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Transacciones");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Seleccione la fecha:");

        jDateChooser_fecha.setBackground(new java.awt.Color(255, 255, 255));
        jDateChooser_fecha.setDateFormatString("yyyy-MM-dd\n");

        tb_transaccion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tb_transaccion.setName("Citas"); // NOI18N
        scp_transaccion.setViewportView(tb_transaccion);

        btn_mostrar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_mostrar.setText("Mostrar");
        btn_mostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_mostrarActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Abonos");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Liquidaciones");

        tb_abonos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tb_abonos.setName("Citas"); // NOI18N
        scp_abonos.setViewportView(tb_abonos);

        tb_liquidacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tb_liquidacion.setName("Citas"); // NOI18N
        scp_liquidacion.setViewportView(tb_liquidacion);

        text_total.setBackground(new java.awt.Color(255, 255, 255));
        text_total.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        text_total.setForeground(new java.awt.Color(0, 0, 0));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Total del dia:");

        jButton1.setBackground(new java.awt.Color(204, 204, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/flecha-izquierda.png"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/fondoventana.jpeg"))); // NOI18N

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jButton1)
                .addGap(134, 134, 134)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(text_total, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addComponent(jDateChooser_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_mostrar))
                    .addComponent(jLabel1))
                .addGap(251, 251, 251)
                .addComponent(jLabel6)
                .addGap(24, 24, 24))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scp_abonos)
                    .addComponent(scp_liquidacion)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(638, 638, 638))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(614, 614, 614)))))
                .addContainerGap())
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scp_transaccion, javax.swing.GroupLayout.PREFERRED_SIZE, 1343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(text_total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)
                        .addComponent(jLabel2))
                    .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel6)
                        .addGroup(panel1Layout.createSequentialGroup()
                            .addComponent(btn_mostrar)
                            .addGap(13, 13, 13)))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addComponent(jDateChooser_fecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scp_transaccion, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scp_abonos, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scp_liquidacion, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(119, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_mostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_mostrarActionPerformed
        // TODO add your handling code here:
        String fecha = ((JTextField) jDateChooser_fecha.getDateEditor().getUiComponent()).getText();
        cargarTablaTransaccion(fecha);
        adjustRowHeights();
        cargarTablaAbonos(fecha);
        adjustRowHeights2();
        cargarTablaLiquidacion(fecha);
        ajustarTablaLiquidacion();
        text_total.setEnabled(true);
        total(fecha);
    }//GEN-LAST:event_btn_mostrarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        panel1.setVisible(false);
        ventana.mostrarImagenDeFondo();
        ventana.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tablaTransaccion() {
        modelo.addColumn("N°");
        modelo.addColumn("Cliente");
        modelo.addColumn("Articulos");
        modelo.addColumn("Importe total");
        modelo.addColumn("A cuenta");
        modelo.addColumn("Por cobrar");
        modelo.addColumn("Fecha");
        modelo.addColumn("Tipo transacción");
        tb_transaccion = new JTable(modelo);
        tb_transaccion.setDefaultEditor(Object.class, null);
        
        MultiLineTableCellRenderer renderer = new MultiLineTableCellRenderer();
        scp_transaccion.setViewportView(tb_transaccion);
        tb_transaccion.getColumnModel().getColumn(2).setCellRenderer(renderer);
        adjustRowHeights();
        
    }
    private void tablaAbonos(){
        modelo2.addColumn("N°");
        modelo2.addColumn("Cliente");
        modelo2.addColumn("Articulos");
        modelo2.addColumn("Fecha");
        modelo2.addColumn("Monto de abono");
        tb_abonos=new JTable(modelo2);
        tb_abonos.setDefaultEditor(Object.class, null);
        
        MultiLineTableCellRenderer renderer = new MultiLineTableCellRenderer();
        scp_abonos.setViewportView(tb_abonos);
        tb_abonos.getColumnModel().getColumn(2).setCellRenderer(renderer);
        adjustRowHeights2();
    }
    private void tablaLiquidaciones(){
        modelo3.addColumn("Cliente");
        modelo3.addColumn("Articulos");
        modelo3.addColumn("Fecha");
        modelo3.addColumn("Monto de liquidacion");
        tb_liquidacion=new JTable(modelo3);
        tb_liquidacion.setDefaultEditor(Object.class, null);
        
        MultiLineTableCellRenderer renderer = new MultiLineTableCellRenderer();
        scp_liquidacion.setViewportView(tb_liquidacion);
        tb_liquidacion.getColumnModel().getColumn(1).setCellRenderer(renderer);
        ajustarTablaLiquidacion();
       
        
    }
    private void adjustRowHeights() {
        for (int row = 0; row < tb_transaccion.getRowCount(); row++) {
        int maxHeight = 0;
        int maxWidth = 0; // Agrega una variable para el ancho máximo
        for (int column = 0; column < tb_transaccion.getColumnCount(); column++) {
            TableCellRenderer cellRenderer = tb_transaccion.getCellRenderer(row, column);
            Component comp = tb_transaccion.prepareRenderer(cellRenderer, row, column);
            maxHeight = Math.max(comp.getPreferredSize().height, maxHeight);
            maxWidth = Math.max(comp.getPreferredSize().width, maxWidth); // Calcula el ancho máximo
        }
        tb_transaccion.setRowHeight(row, maxHeight);
        tb_transaccion.getColumnModel().getColumn(1).setPreferredWidth(150); // Establece el ancho de la columna "Artículos
        tb_transaccion.getColumnModel().getColumn(2).setPreferredWidth(345); // Establece el ancho de la columna "Artículos"
        tb_transaccion.getColumnModel().getColumn(3).setPreferredWidth(30); // Establece el ancho de la columna "Artículos"
        tb_transaccion.getColumnModel().getColumn(4).setPreferredWidth(30); // Establece el ancho de la columna "Artículos"
        tb_transaccion.getColumnModel().getColumn(5).setPreferredWidth(30); // Establece el ancho de la columna "Artículos"
        
        }
    }
    private void adjustRowHeights2() {
        for (int row = 0; row < tb_abonos.getRowCount(); row++) {
        int maxHeight = 0;
        int maxWidth = 0; // Agrega una variable para el ancho máximo
        for (int column = 0; column < tb_abonos.getColumnCount(); column++) {
            TableCellRenderer cellRenderer = tb_abonos.getCellRenderer(row, column);
            Component comp = tb_abonos.prepareRenderer(cellRenderer, row, column);
            maxHeight = Math.max(comp.getPreferredSize().height, maxHeight);
            maxWidth = Math.max(comp.getPreferredSize().width, maxWidth); // Calcula el ancho máximo
        }
        tb_abonos.setRowHeight(row, maxHeight);
        tb_abonos.getColumnModel().getColumn(2).setPreferredWidth(225); // Establece el ancho de la columna "Artículos"
        }
    }
    private void ajustarTablaLiquidacion() {
        for (int row = 0; row < tb_liquidacion.getRowCount(); row++) {
        int maxHeight = 0;
        int maxWidth = 0; // Agrega una variable para el ancho máximo
        for (int column = 0; column < tb_liquidacion.getColumnCount(); column++) {
            TableCellRenderer cellRenderer = tb_liquidacion.getCellRenderer(row, column);
            Component comp = tb_liquidacion.prepareRenderer(cellRenderer, row, column);
            maxHeight = Math.max(comp.getPreferredSize().height, maxHeight);
            maxWidth = Math.max(comp.getPreferredSize().width, maxWidth); // Calcula el ancho máximo
        }
        tb_liquidacion.setRowHeight(row, maxHeight);
        tb_liquidacion.getColumnModel().getColumn(1).setPreferredWidth(225); // Establece el ancho de la columna "Artículos"
        }
    }
    
    public class MultiLineTableCellRenderer extends JTextArea implements TableCellRenderer {

        public MultiLineTableCellRenderer() {
            setLineWrap(true);
            setWrapStyleWord(true);
            setOpaque(true);
            setBorder(null);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (isSelected) {
                setBackground(table.getSelectionBackground());
                setForeground(table.getSelectionForeground());
            } else {
                setBackground(table.getBackground());
                setForeground(table.getForeground());
            }

            // Set the text for the cell
            if (value != null) {
                setText(value.toString());
            } else {
                setText("");
            }

            return this;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_mostrar;
    private javax.swing.JButton jButton1;
    private com.toedter.calendar.JDateChooser jDateChooser_fecha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel panel1;
    private javax.swing.JScrollPane scp_abonos;
    private javax.swing.JScrollPane scp_liquidacion;
    private javax.swing.JScrollPane scp_transaccion;
    private javax.swing.JTable tb_abonos;
    private javax.swing.JTable tb_liquidacion;
    private javax.swing.JTable tb_transaccion;
    private javax.swing.JTextField text_total;
    // End of variables declaration//GEN-END:variables
    public void cargarTablaTransaccion(String fecha) {
        Connection cn = Conexion.Conectar();
        String query = "SELECT dt.id_datosTransaccion AS id, CONCAT(c.nombre_cliente, ' ', c.apellidos_cliente) AS cliente, GROUP_CONCAT(CONCAT(tr.cantidad,' ',a.nombre_articulo, ' - ', a.descripcion_articulo,' - $',a.precio_articulo) SEPARATOR '\\n') AS articulos_comprados, dt.importe_total AS total, dt.aCuenta AS cuenta,dt.valorPagar AS por_cobrar, dt.fecha_transaccion AS fecha, dt.tipo_transaccion AS transaccion FROM datos_transaccion AS dt INNER JOIN cliente AS c ON dt.id_cliente = c.id_cliente INNER JOIN transacciones AS tr ON dt.id_datosTransaccion = tr.id_datosTransaccion INNER JOIN articulos AS a ON tr.id_articulo = a.id_articulo WHERE dt.fecha_transaccion='"+fecha+"' GROUP BY dt.id_datosTransaccion";
        try (PreparedStatement st = cn.prepareStatement(query)) {
            ResultSet rs = st.executeQuery();
            while (modelo.getRowCount() > 0) {
                modelo.removeRow(0);
            }
            scp_transaccion.setViewportView(tb_transaccion);
            while (rs.next()) {
                Object fila[] = new Object[8];
                for (byte i = 0; i < 8; i++) {
                    fila[i] = rs.getObject(i + 1);
                }
                modelo.addRow(fila);
                tb_transaccion.getColumnModel().getColumn(2).setCellRenderer(new MultiLineTableCellRenderer());
            }
            cn.close();
        } catch (SQLException ex) {
            System.out.println("Falló la consulta de transaccion: " + ex);
        }
    }
    public void cargarTablaAbonos(String fecha) {
        Connection cn = Conexion.Conectar();
        String query = "SELECT ab.id_abono AS id, \n" +
"       CONCAT(c.nombre_cliente, ' ', c.apellidos_cliente) AS cliente, \n" +
"       GROUP_CONCAT(DISTINCT CONCAT(tr.cantidad,' ',a.nombre_articulo, ' - ', a.descripcion_articulo,' - $',a.precio_articulo) ORDER BY a.id_articulo SEPARATOR '\\n') AS articulos_comprados, \n" +
"       ab.fecha_abono AS fecha, \n" +
"       ab.monto_abono AS monto \n" +
"FROM datos_transaccion AS dt \n" +
"INNER JOIN cliente AS c ON dt.id_cliente = c.id_cliente \n" +
"INNER JOIN transacciones AS tr ON dt.id_datosTransaccion = tr.id_datosTransaccion \n" +
"INNER JOIN articulos AS a ON tr.id_articulo = a.id_articulo \n" +
"INNER JOIN abonos AS ab ON ab.id_datosTransaccion = dt.id_datosTransaccion \n" +
"WHERE dt.fecha_transaccion = '"+fecha+"' \n" +
"GROUP BY dt.id_datosTransaccion";
        try (PreparedStatement st = cn.prepareStatement(query)) {
            ResultSet rs = st.executeQuery();
            while (modelo2.getRowCount() > 0) {
                modelo2.removeRow(0);
            }
            scp_abonos.setViewportView(tb_abonos);
            while (rs.next()) {
                Object fila[] = new Object[5];
                for (byte i = 0; i < 5; i++) {
                    fila[i] = rs.getObject(i + 1);
                }
                modelo2.addRow(fila);
                tb_abonos.getColumnModel().getColumn(2).setCellRenderer(new MultiLineTableCellRenderer());
            }
            cn.close();
        } catch (SQLException ex) {
            System.out.println("Falló la consulta de abonos: " + ex);
        }
    }
    public void cargarTablaLiquidacion(String fecha) {
        Connection cn = Conexion.Conectar();
        String query = "SELECT CONCAT(c.nombre_cliente, ' ', c.apellidos_cliente) AS cliente, GROUP_CONCAT(CONCAT(tr.cantidad,' ',a.nombre_articulo, ' - ', a.descripcion_articulo,' - $',a.precio_articulo) SEPARATOR '\\n') AS articulos_comprados, liq.fecha_liquidacion AS fecha, liq.monto_liquidacion AS monto FROM datos_transaccion AS dt INNER JOIN cliente AS c ON dt.id_cliente = c.id_cliente INNER JOIN transacciones AS tr ON dt.id_datosTransaccion = tr.id_datosTransaccion INNER JOIN articulos AS a ON tr.id_articulo = a.id_articulo INNER JOIN liquidaciones AS liq ON liq.id_datosTransaccion=dt.id_datosTransaccion WHERE dt.fecha_transaccion='"+fecha+"' GROUP BY dt.id_datosTransaccion";
        try (PreparedStatement st = cn.prepareStatement(query)) {
            ResultSet rs = st.executeQuery();
            while (modelo3.getRowCount() > 0) {
                modelo3.removeRow(0);
            }
            scp_liquidacion.setViewportView(tb_liquidacion);
            while (rs.next()) {
                Object fila[] = new Object[4];
                for (byte i = 0; i < 4; i++) {
                    fila[i] = rs.getObject(i + 1);
                }
                modelo3.addRow(fila);
                tb_liquidacion.getColumnModel().getColumn(1).setCellRenderer(new MultiLineTableCellRenderer());
            }
            cn.close();
        } catch (SQLException ex) {
            System.out.println("Falló la consulta de liquidaciones: " + ex);
        }
    }
    private void total(String fecha){
        Connection cn=Conexion.Conectar();
        String sql = "SELECT cuenta.cuenta AS suma_cuenta,ab.ab AS suma_abonos,liq.liq AS suma_liquidaciones,cuenta.cuenta + ab.ab + liq.liq AS total FROM (SELECT SUM(aCuenta) AS cuenta FROM datos_transaccion WHERE datos_transaccion.fecha_transaccion = '"+fecha+"') cuenta,(SELECT SUM(monto_abono) AS ab FROM abonos WHERE abonos.fecha_abono = '"+fecha+"') ab,(SELECT SUM(monto_liquidacion) AS liq FROM liquidaciones WHERE liquidaciones.fecha_liquidacion = '"+fecha+"') liq";
                Statement st;
        try{
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                text_total.setText(rs.getString("total"));
            }
            st.close();
            cn.close();
        }catch(SQLException e){
            System.out.println("Error al obtener el total"+e);
        }
    }
}
