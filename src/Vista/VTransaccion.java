/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Vista;

import Conexion.Conexion;
import Controlador.CtrlTransaccion;
import Controlador.TransaccionPdf;
import Modelo.Cliente;
import Modelo.DatosTransaccion;
import Modelo.Transaccion;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Angelica Guerrero
 */
public class VTransaccion extends javax.swing.JInternalFrame {
private FMenu ventana;
private FMenu menu;
    DefaultTableModel modelo = new DefaultTableModel();
    //lista para el detalle de venta de los productos
    ArrayList<Transaccion> listaArticulo = new ArrayList<>();
    private Transaccion articulo;

    private int idArticulo = 0;
    private String nombre2 = "";
    private String descripcion2 = "";
    private int cantidadP = 0;
    private double precio_unitario = 0.0;

    private int cantidad = 0;
    private double importe = 0.0;
    private double importe_total = 0.0;
    private int auxdet = 1;

    //variables para calculos globales
    private double importeGeneral = 0.0;
    private double importeTotalGeneral = 0.0;

    private Vector<Integer> idCliente = new Vector<>();
    private Vector<Integer> idUsuario = new Vector<>();
    private Vector<Integer> idCategoria = new Vector<>();

    private boolean is_selected = false;

    public VTransaccion(FMenu ventana) {
        initComponents();
        this.ventana=ventana;
        this.ventana.mostrarImagenDeFondo();
        
        this.setSize(1366,660);
        this.menu=ventana;
        this.cargarCategorias();
        this.cargarComboClientes();
        this.cargarComboUsuarios();
        this.tablaProductos();
        text_importeTotal.setEnabled(false);
        text_cuenta.setEnabled(false);
        text_cobrar.setEnabled(false);
        btn_calcular.setEnabled(false);
        text_importeTotal.setText("0.0");
        cmb_metodopago.setEnabled(false);

        //obteener fecha
        text_fecha.setEnabled(false);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date currentDateAndTime = new Date(System.currentTimeMillis());
        text_fecha.setText(sdf.format(currentDateAndTime));

        tb_transaccion = new JTable(modelo);
        //campos no editables
        tb_transaccion.setDefaultEditor(Object.class, null);
        tb_transaccion.getColumnModel().getColumn(0).setPreferredWidth(10); // Establece el ancho de la columna "Artículos"
        
        tb_transaccion.getColumnModel().getColumn(3).setPreferredWidth(200); // Establece el ancho de la columna "Artículos"
        
        scp_transaccion.setViewportView(tb_transaccion);
        //cargar tabla
        tb_transaccion.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_seleccionada = tb_transaccion.rowAtPoint(e.getPoint());
                int columna_seleccionada = 0;
                if (fila_seleccionada > -1) {
                    is_selected = true;
                }
            }
        });
        //mostrar articulos dependiendo la categoria que se seleccione
        cmb_categoria.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        cargarArticulos();
    }
});
    }

    private void tablaProductos() {
        modelo = new DefaultTableModel();
        modelo.addColumn("N°");
        modelo.addColumn("Categoria");
        modelo.addColumn("Nombre");
        modelo.addColumn("Descripción");
        modelo.addColumn("Cantidad");
        modelo.addColumn("Precio unitario");
        modelo.addColumn("Importe");
        this.tb_transaccion.setModel(modelo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cmb_cliente = new javax.swing.JComboBox<>();
        cmb_articulo = new javax.swing.JComboBox<>();
        cmb_transaccion = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        text_importeTotal = new javax.swing.JTextField();
        cmb_metodopago = new javax.swing.JComboBox<>();
        text_cuenta = new javax.swing.JTextField();
        text_cobrar = new javax.swing.JTextField();
        btn_calcular = new javax.swing.JButton();
        text_cantidad = new javax.swing.JTextField();
        btn_registrar = new javax.swing.JButton();
        btn_añadir = new javax.swing.JButton();
        cmb_usuario = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        text_condicion = new javax.swing.JTextField();
        btn_eliminarArticulo = new javax.swing.JButton();
        text_fecha = new javax.swing.JTextField();
        text_buscarCliente = new javax.swing.JTextField();
        btn_buscarcliente = new javax.swing.JButton();
        scp_transaccion = new javax.swing.JScrollPane();
        tb_transaccion = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        cmb_categoria = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();

        setClosable(true);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Cliente:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Articulo:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Cantidad:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Usuario:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Transacción:");

        cmb_cliente.setBackground(new java.awt.Color(255, 255, 255));
        cmb_cliente.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmb_cliente.setForeground(new java.awt.Color(0, 0, 0));
        cmb_cliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione cliente" }));

        cmb_articulo.setBackground(new java.awt.Color(255, 255, 255));
        cmb_articulo.setForeground(new java.awt.Color(0, 0, 0));
        cmb_articulo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione articulo" }));

        cmb_transaccion.setBackground(new java.awt.Color(255, 255, 255));
        cmb_transaccion.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmb_transaccion.setForeground(new java.awt.Color(0, 0, 0));
        cmb_transaccion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione el tipo de transacción", "Venta", "Apartado" }));

        jPanel2.setBackground(new java.awt.Color(153, 153, 255));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Importe total:");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Metódo de pago:");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("A cuenta:");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("Por cobrar:");

        text_importeTotal.setBackground(new java.awt.Color(255, 255, 255));
        text_importeTotal.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        text_importeTotal.setForeground(new java.awt.Color(0, 0, 0));

        cmb_metodopago.setBackground(new java.awt.Color(255, 255, 255));
        cmb_metodopago.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        cmb_metodopago.setForeground(new java.awt.Color(0, 0, 0));
        cmb_metodopago.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione el metodo de pago", "Efectivo", "Con tarjeta", "Transferencia" }));

        text_cuenta.setBackground(new java.awt.Color(255, 255, 255));
        text_cuenta.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        text_cuenta.setForeground(new java.awt.Color(0, 0, 0));

        text_cobrar.setBackground(new java.awt.Color(255, 255, 255));
        text_cobrar.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        text_cobrar.setForeground(new java.awt.Color(0, 0, 0));

        btn_calcular.setBackground(new java.awt.Color(51, 114, 210));
        btn_calcular.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_calcular.setForeground(new java.awt.Color(0, 0, 0));
        btn_calcular.setText("Calcular cantidad por cobrar");
        btn_calcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_calcularActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmb_metodopago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(text_importeTotal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 268, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(btn_calcular)
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(text_cuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(text_cobrar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(330, 330, 330))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(text_cuenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1)
                        .addComponent(btn_calcular)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(cmb_metodopago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(text_importeTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel10)
                            .addComponent(text_cobrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 21, Short.MAX_VALUE))))
        );

        text_cantidad.setBackground(new java.awt.Color(255, 255, 255));
        text_cantidad.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        text_cantidad.setForeground(new java.awt.Color(0, 0, 0));

        btn_registrar.setBackground(new java.awt.Color(225, 220, 220));
        btn_registrar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_registrar.setForeground(new java.awt.Color(0, 0, 0));
        btn_registrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/verificar (1).png"))); // NOI18N
        btn_registrar.setText("Registrar");
        btn_registrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_registrarActionPerformed(evt);
            }
        });

        btn_añadir.setBackground(new java.awt.Color(225, 220, 220));
        btn_añadir.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btn_añadir.setForeground(new java.awt.Color(0, 0, 0));
        btn_añadir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/carretilla.png"))); // NOI18N
        btn_añadir.setText("Añadir articulos");
        btn_añadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_añadirActionPerformed(evt);
            }
        });

        cmb_usuario.setBackground(new java.awt.Color(255, 255, 255));
        cmb_usuario.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmb_usuario.setForeground(new java.awt.Color(0, 0, 0));
        cmb_usuario.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione el usuario" }));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("Condición:");

        text_condicion.setBackground(new java.awt.Color(255, 255, 255));
        text_condicion.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        text_condicion.setForeground(new java.awt.Color(0, 0, 0));

        btn_eliminarArticulo.setBackground(new java.awt.Color(225, 220, 220));
        btn_eliminarArticulo.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btn_eliminarArticulo.setForeground(new java.awt.Color(0, 0, 0));
        btn_eliminarArticulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/quitar-carrito.png"))); // NOI18N
        btn_eliminarArticulo.setText("Eliminar articulo");
        btn_eliminarArticulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminarArticuloActionPerformed(evt);
            }
        });

        text_fecha.setBackground(new java.awt.Color(204, 204, 204));
        text_fecha.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        text_fecha.setForeground(new java.awt.Color(0, 0, 0));

        text_buscarCliente.setBackground(new java.awt.Color(255, 255, 255));
        text_buscarCliente.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        text_buscarCliente.setForeground(new java.awt.Color(0, 0, 0));

        btn_buscarcliente.setBackground(new java.awt.Color(225, 220, 220));
        btn_buscarcliente.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btn_buscarcliente.setForeground(new java.awt.Color(0, 0, 0));
        btn_buscarcliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/lupa.png"))); // NOI18N
        btn_buscarcliente.setText("Buscar");
        btn_buscarcliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarclienteActionPerformed(evt);
            }
        });

        tb_transaccion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tb_transaccion.setName("Citas"); // NOI18N
        scp_transaccion.setViewportView(tb_transaccion);

        jLabel6.setFont(new java.awt.Font("Source Sans Pro", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Nueva transacción");

        jButton1.setBackground(new java.awt.Color(204, 204, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/flecha-izquierda.png"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/fondoventana.jpeg"))); // NOI18N

        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 0, 0));
        jLabel14.setText("Categoria:");

        cmb_categoria.setBackground(new java.awt.Color(255, 255, 255));
        cmb_categoria.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmb_categoria.setForeground(new java.awt.Color(0, 0, 0));
        cmb_categoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel15.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 0, 0));
        jLabel15.setText("Fecha y hora");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_registrar)
                        .addGap(133, 133, 133))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(scp_transaccion, javax.swing.GroupLayout.PREFERRED_SIZE, 1245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jButton1)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(123, 123, 123)
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(text_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addGap(18, 18, 18)
                                        .addComponent(cmb_categoria, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel2))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cmb_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cmb_articulo, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addGap(16, 16, 16))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(text_buscarCliente)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btn_buscarcliente)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel11)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(text_cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(text_condicion, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmb_transaccion, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmb_usuario, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(726, 726, 726)
                        .addComponent(btn_añadir)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(722, 722, 722)
                .addComponent(btn_eliminarArticulo)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(text_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel15))
                            .addComponent(jLabel13))
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(cmb_usuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(text_condicion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(text_buscarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_buscarcliente)
                            .addComponent(cmb_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(text_cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmb_categoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(cmb_transaccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(cmb_articulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel14))
                .addGap(26, 26, 26)
                .addComponent(btn_añadir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scp_transaccion, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btn_eliminarArticulo)
                        .addGap(12, 12, 12)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(btn_registrar, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(72, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_añadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_añadirActionPerformed
        // TODO add your handling code here:
        String combo = this.cmb_articulo.getSelectedItem().toString();
        String tipoMetodoPago = "";
        tipoMetodoPago = cmb_metodopago.getSelectedItem().toString();
        String categoria = cmb_categoria.getSelectedItem().toString();
        if (combo.equalsIgnoreCase("Seleccione articulo")) {
            JOptionPane.showMessageDialog(null, "Seleccione un articulo");
        } else {
            if (!text_cantidad.getText().isEmpty()) {
                cantidad = Integer.parseInt(text_cantidad.getText());
                //validar que la cantidad de la bd  no sea mayor al stock
                this.datosArticulo();
                if (cantidad <= cantidadP) {
                    importe = precio_unitario * cantidad;
                    importe_total = importe;
                    //redondear decimales
                    importe = (double) Math.round(importe * 100) / 100;
                    importe_total = (double) Math.round(importe_total * 100) / 100;

                    //se crea nuevo producto
                    articulo = new Transaccion(auxdet, 1, idArticulo, categoria,nombre2, descripcion2, cantidad, precio_unitario, importe, importe_total, tipoMetodoPago);
                    listaArticulo.add(articulo);
                    JOptionPane.showMessageDialog(null, "Producto agregado");
                    auxdet++;
                    text_cantidad.setText("");
                    this.cargarArticulos();
                    this.calcularTotalPagar();
                    text_cuenta.setEnabled(true);
                    btn_calcular.setEnabled(true);
                    cmb_metodopago.setEnabled(true);
                } else {
                    JOptionPane.showMessageDialog(null, "La cantidad supera el stock");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Ingresa la cantidad");
            }
        }
        this.listaTablaArticulos();
    }//GEN-LAST:event_btn_añadirActionPerformed

    private void btn_calcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_calcularActionPerformed
        // TODO add your handling code here:
        if (!text_cuenta.getText().isEmpty()) {

            double cuenta = Double.parseDouble(text_cuenta.getText().trim());
            double totpag = Double.parseDouble(text_importeTotal.getText().trim());
            double cobrar = (totpag - cuenta);
            double cobrar2 = (double) Math.round(cobrar * 100) / 100;
            String cobrarT = String.valueOf(cobrar2);
            text_cobrar.setText(cobrarT);

        } else {
            JOptionPane.showMessageDialog(null, "Ingresa el dinero para calcular cambio");

        }
    }//GEN-LAST:event_btn_calcularActionPerformed

    private void btn_eliminarArticuloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminarArticuloActionPerformed
        // TODO add your handling code here:
        if (is_selected) {
            int opcion = JOptionPane.showConfirmDialog(this, "¿Estás seguro de eliminar este artículo seleccionado?", "Confirmar Eliminación", JOptionPane.YES_NO_OPTION);
            if (opcion == JOptionPane.YES_OPTION) {
                // Obtener la fila seleccionada
                int fila_seleccionada = tb_transaccion.getSelectedRow();
                if (fila_seleccionada != -1) {
                    // Eliminar el artículo de la lista según la fila seleccionada
                    listaArticulo.remove(fila_seleccionada);
                    // Mostrar un mensaje de éxito si la eliminación fue exitosa.
                    JOptionPane.showMessageDialog(null, "El artículo seleccionado se eliminó correctamente");
                    // Recargar la tabla con la información actualizada.
                    this.listaTablaArticulos();
                } else {
                    // Mostrar un mensaje de error si no se seleccionó ninguna fila.
                    JOptionPane.showMessageDialog(null, "Selecciona un artículo para eliminar");
                }
            }
        } else {
            // Mostrar un mensaje de error si no se seleccionó ningún artículo.
            JOptionPane.showMessageDialog(null, "Selecciona un artículo para eliminar");
        }
    }//GEN-LAST:event_btn_eliminarArticuloActionPerformed

    private void btn_registrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_registrarActionPerformed
        // datos cabecera de venta
        DatosTransaccion datos = new DatosTransaccion();
        Transaccion transaccion = new Transaccion();
        CtrlTransaccion ctrlTransaccion = new CtrlTransaccion();
        String fechaActual = "";
        Date date = new Date();
        fechaActual = new SimpleDateFormat("yyyy/MM/dd").format(date);
        String tipoTransaccion = "";
        tipoTransaccion = cmb_transaccion.getSelectedItem().toString();
        String tipoMetodoPago = "";
        tipoMetodoPago = cmb_metodopago.getSelectedItem().toString();
        if (!cmb_cliente.getSelectedItem().equals("Seleccione cliente")) {
            if (!cmb_usuario.getSelectedItem().equals("Seleccione usuario")) {
                if (tipoTransaccion.equalsIgnoreCase("Seleccione el tipo de transacción")) {
                    JOptionPane.showMessageDialog(null, "Seleccione un tipo de transaccion");
                } else {
                    if (tipoMetodoPago.equalsIgnoreCase("Seleccione el metodo de pago")) {
                        JOptionPane.showMessageDialog(null, "Seleccione un metodo de pago");
                    } else {
                        //si el tamaño de  la lista es mayor a 0 hay producto
                        if (listaArticulo.size() > 0) {
                            //Guarda posicion del combo box para saber el id de cliente
                            int cliente = idCliente.get(cmb_cliente.getSelectedIndex() - 1);
                            int usuario = idUsuario.get(cmb_usuario.getSelectedIndex() - 1);
                            
                            datos.setId_datosTransaccion(0);
                            datos.setId_usuario(usuario);
                            datos.setId_cliente(cliente);
                            datos.setFecha_transaccion(fechaActual);
                            datos.setImporte_total(Double.parseDouble(text_importeTotal.getText()));
                            datos.setCuenta(Double.parseDouble(text_cuenta.getText()));
                            datos.setValorPagar(Double.parseDouble(text_cobrar.getText()));
                            datos.setTipo_transaccion(tipoTransaccion);
                            datos.setCondicion_transaccion(text_condicion.getText());
                            if (ctrlTransaccion.agregar(datos)) {
                                JOptionPane.showMessageDialog(null, "Transaccion registrada");
                                //generar factura de venta
                                TransaccionPdf pdf=new TransaccionPdf();
                                pdf.DatosCliente(cliente);
                                pdf.generarFacturaPDF();
                                //guardar detalles
                                for (Transaccion elemento : listaArticulo) {
                                    //GUARDAR CADA PRODUCTO
                                    transaccion.setId_transaccion(0);
                                    transaccion.setId_datosTransaccion(0);
                                    transaccion.setId_articulo(elemento.getId_articulo());
                                    transaccion.setCantidad(elemento.getCantidad());
                                    transaccion.setPrecio_unitario(elemento.getPrecio_unitario());
                                    transaccion.setImporte(elemento.getImporte());
                                    transaccion.setMetodo_pago(tipoMetodoPago);
                                    if (ctrlTransaccion.agregarDetalleTransaccion(transaccion)) {
                                        //System.out.println("Detalle de transaccion registrado");
                                        text_condicion.setText("");
                                        text_importeTotal.setText("0.0");
                                        text_cuenta.setText("0.0");
                                        text_cobrar.setText("0.0");
                                        this.cargarComboClientes();
                                        this.cargarComboUsuarios();
                                        cmb_transaccion.setSelectedItem("Seleccione el tipo de transacción");
                                        cmb_metodopago.setSelectedItem("Seleccione el metodo de pago");
                                        //obtener datos de la lista para restar
                                        this.restarStockProductos(elemento.getId_articulo(), elemento.getCantidad());
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Error al guardar transaccion");

                                    }
                                }
                                //resetear la tabla
                                listaArticulo.clear();
                                listaTablaArticulos();
                            } else {
                                JOptionPane.showMessageDialog(null, "Error al guardar datos");

                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Seleccione un producto");
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Seleccione un usuario");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un cliente");
        }
    }//GEN-LAST:event_btn_registrarActionPerformed

    private void btn_buscarclienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarclienteActionPerformed
        // TODO add your handling code here:
        
        String clienteBuscar=text_buscarCliente.getText().trim();
        Connection cn=Conexion.Conectar();
        String sql="SELECT * FROM cliente WHERE CONCAT(nombre_cliente, ' ', apellidos_cliente) = '" + clienteBuscar + "'";;
        Statement st;
        try{
            st=cn.createStatement();
            ResultSet rs=st.executeQuery(sql);
            if(rs.next()){
                //seleccionar el cliente escrito
                cmb_cliente.setSelectedItem(rs.getString("nombre_cliente")+" "+rs.getString("apellidos_cliente"));
                
            }else{
                cmb_cliente.setSelectedItem("Seleccione cliente");
                JOptionPane.showMessageDialog(null, "Nombre incorrecto o no encontrado");
            }
            text_buscarCliente.setText("");
            cn.close();
        }catch(SQLException e){
            System.out.println("Error al buscar cliente "+ e);
        }
    }//GEN-LAST:event_btn_buscarclienteActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jPanel1.setVisible(false);
        menu.mostrarImagenDeFondo();
        menu.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_añadir;
    private javax.swing.JButton btn_buscarcliente;
    private javax.swing.JButton btn_calcular;
    private javax.swing.JButton btn_eliminarArticulo;
    private javax.swing.JButton btn_registrar;
    private javax.swing.JComboBox<String> cmb_articulo;
    private javax.swing.JComboBox<String> cmb_categoria;
    private javax.swing.JComboBox<String> cmb_cliente;
    private javax.swing.JComboBox<String> cmb_metodopago;
    private javax.swing.JComboBox<String> cmb_transaccion;
    private javax.swing.JComboBox<String> cmb_usuario;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane scp_transaccion;
    public static javax.swing.JTable tb_transaccion;
    private javax.swing.JTextField text_buscarCliente;
    private javax.swing.JTextField text_cantidad;
    public static javax.swing.JTextField text_cobrar;
    private javax.swing.JTextField text_condicion;
    public static javax.swing.JTextField text_cuenta;
    private javax.swing.JTextField text_fecha;
    public static javax.swing.JTextField text_importeTotal;
    // End of variables declaration//GEN-END:variables

    private void cargarComboClientes() {
        Connection cn = Conexion.Conectar();
        String query = "SELECT * FROM cliente";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(query);
            cmb_cliente.removeAllItems();
            cmb_cliente.addItem("Seleccione cliente");
            while (rs.next()) {
                cmb_cliente.addItem(rs.getString("nombre_cliente") + " " + rs.getString("apellidos_cliente"));
                idCliente.add(rs.getInt("id_cliente"));
            }
            cn.close();
        } catch (SQLException ex) {
            System.out.println("Error al cargar clientes");
        }
    }

    private void cargarComboUsuarios() {
        Connection cn = Conexion.Conectar();
        String query = "SELECT * FROM usuarios";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(query);
            cmb_usuario.removeAllItems();
            cmb_usuario.addItem("Seleccione usuario");
            while (rs.next()) {
                cmb_usuario.addItem(rs.getString("nombre_usuario") + " " + rs.getString("apellidos_usuario"));
                idUsuario.add(rs.getInt("id_usuario"));
            }
            cn.close();
        } catch (SQLException ex) {
            System.out.println("Error al cargar usuarios");
        }
    }

    private void cargarArticulos() {
        Connection cn = Conexion.Conectar();
        String query = "SELECT articulos.nombre_articulo,articulos.descripcion_articulo FROM articulos JOIN categorias ON articulos.id_categoria=categorias.id_categoria WHERE categorias.categoria= ?";
        PreparedStatement st;
        try {
            st = cn.prepareStatement(query);
            st.setString(1, (String) cmb_categoria.getSelectedItem());
        
            ResultSet rs = st.executeQuery();
            cmb_articulo.removeAllItems();
            cmb_articulo.addItem("Seleccione articulo");
            while (rs.next()) {
                String nombre = rs.getString("nombre_articulo");
                String descripcion = rs.getString("descripcion_articulo");
                cmb_articulo.addItem(nombre + " - " + descripcion);
            }
            cn.close();
        } catch (SQLException ex) {
            System.out.println("Error al cargar articulos");
        }
    }

    private void datosArticulo() {
        try {
            String nombreDescripcion = this.cmb_articulo.getSelectedItem().toString();
            String[] partes = nombreDescripcion.split(" - ");
            String nombre = partes[0];
            String descripcion = partes[1];
            String sql = "SELECT * FROM articulos WHERE nombre_articulo = '" + nombre + "' AND descripcion_articulo = '" + descripcion + "'";

            Connection cn = Conexion.Conectar();
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                idArticulo = rs.getInt("id_articulo");
                nombre2 = rs.getString("nombre_articulo");
                descripcion2 = rs.getString("descripcion_articulo");
                cantidadP = rs.getInt("stock_articulo");
                precio_unitario = rs.getDouble("precio_articulo");

            }

        } catch (SQLException e) {
            System.out.println("Error al obtener id articulo");
        }
    }

    //PRESENTAR informacion de la tabla
    private void listaTablaArticulos() {
        this.modelo.setRowCount(listaArticulo.size());
        for (int i = 0; i < listaArticulo.size(); i++) {
            this.modelo.setValueAt(i + 1, i, 0);
            this.modelo.setValueAt(listaArticulo.get(i).getCategoria(), i, 1);
            
            this.modelo.setValueAt(listaArticulo.get(i).getNombre(), i, 2);
            
            this.modelo.setValueAt(listaArticulo.get(i).getDescripcion(), i, 3);
            this.modelo.setValueAt(listaArticulo.get(i).getCantidad(), i, 4);
            this.modelo.setValueAt(listaArticulo.get(i).getPrecio_unitario(), i, 5);
            this.modelo.setValueAt(listaArticulo.get(i).getImporte(), i, 6);
        }
        tb_transaccion.setModel(modelo);
    }

    //total a pagar de todos los productos agregados
    private void calcularTotalPagar() {
        importeGeneral = 0;
        importeTotalGeneral = 0;
        for (Transaccion elemento : listaArticulo) {
            importeGeneral += elemento.getImporte();
            importeTotalGeneral += elemento.getImporte_total();

        }
        importeGeneral = (double) Math.round(importeGeneral * 100) / 100;
        importeTotalGeneral = (double) Math.round(importeTotalGeneral * 100) / 100;
        //enviar datos a la vista
        text_importeTotal.setText(String.valueOf(importeTotalGeneral));
    }

    private void restarStockProductos(int idArticulo, int cantidad) {
        int cantidadArticulosBD = 0;
        //obtener los datos del producto para hacer la resta
        try {
            Connection cn = Conexion.Conectar();
            String sql = "SELECT id_articulo,stock_articulo FROM articulos WHERE id_articulo= '" + idArticulo + "'";
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                cantidadArticulosBD = rs.getInt("stock_articulo");
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al restar cantidad" + e);
        }
        try {
            Connection cn = Conexion.Conectar();
            //SENTENCIA QUE SE VA AUTLIZAR PARA ACTUALIZAR PRODUCTOS
            PreparedStatement consulta = cn.prepareStatement("UPDATE articulos SET stock_articulo=? WHERE id_articulo='" + idArticulo + "'");
            int stockNuevo = cantidadArticulosBD - cantidad;
            //enviar a bd 
            consulta.setInt(1, stockNuevo);
            if (consulta.executeUpdate() > 0) {
                System.out.println("Todo bien");
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al restar cantidad 1" + e);
        }
    }
    private void cargarCategorias(){
        Connection cn=Conexion.Conectar();
        String sql = "SELECT * FROM categorias";
        Statement st;
        try{
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            cmb_categoria.removeAllItems();
            cmb_categoria.addItem("Seleccione la categoria");
            while (rs.next()) {
                cmb_categoria.addItem(rs.getString("categoria"));
            }
            st.close();
            cn.close();
        }catch(SQLException e){
            System.out.println("Error al cargar categorias");
        }
    }
}
